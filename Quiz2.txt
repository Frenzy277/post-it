Quiz: Lesson 2

Some exercises from lesson 2 materials:

1) Name all the 7 (or 8) routes exposed by the resources keyword in the routes.rb file. Also name the 4 named routes, and how the request is routed to the controller/action.

named_path    - verb   -  generated URL  -  controller#action
posts_path      GET       /posts            posts#index
posts_path      POST      /posts            posts#create
new_post_path   GET       /posts/new        posts#new
edit_post_path  GET       /posts/:id/edit   posts#edit
post_path       GET       /posts/:id        posts#show
post_path       PATCH     /posts/:id        posts#update
post_path       PUT       /posts/:id        posts#update
post_path       DELETE    /posts/:id        posts#destroy

get '/posts', to: 'posts#index', as: 'posts'
post '/posts', to: 'posts#create'
get '/posts/new', to: 'posts#new', as: 'new_post'
get '/posts/:id/edit', to: 'posts#edit', as: 'edit_post'
get '/posts/:id', to: 'posts#show'
patch '/posts/:id', to: 'posts#update'
put '/posts/:id', to: 'posts#update'
delete '/posts/:id', to: 'posts#destroy'

2) What is REST and how does it relate to the resources routes?
RESTful design is based on these actions (index, create, new, edit, show, update, destroy)
resources routes build REST actions

3) What's the major difference between model backed and non-model backed form helpers?
form_tag helpers = Non-model backed is not tied obviously to any model and you have to specify the action or path. 
we would use form_tag helpers for forms where params data would not be entered to database.

form_for helpers = Model backed are bound to a setter method of an attribute from the model (real or virtual). You have to specify the object. Assumes too much of 'rails magic' like action generated by form based on the object.
we would use form_for helpers for any form where our data would flow to model/database
params submitted to model backed form helpers are under a hash named by the model.

4) How does form_for know how to build the <form> element?
form_for is a helper method that assumes what action is returned based on object provided, but the it can be modified.

5) What's the general pattern we use in the actions that handle submission of model-backed forms (ie, the create and update actions)?
if @object.save/update(strong_params)
  flash[:notice] = "some message"
  redirect_to
else
  render template
end

6) How exactly do Rails validations get triggered? Where are the errors saved? How do we show the validation messages on the user interface?
Validations get triggered when the object is being saved, created or updated (or deleted)
Errors are saved actually inside the object. Can be retrieved after by object.errors. 
Validation messages are shown in the template. There is a method full_messages which returns an array of messages.

if obj.errors.any?
  <-- insert some html divs classes, text -->
  obj.errors.full_messages.each { |error| error }
end

7) What are Rails helpers?
Rails helper are methods that belong to ActionView and are supposed to be helpful in presentation layer. Especially in views to reduce small repetition.

8) What are Rails partials?
Partials are pieces of html pages that can be rendered by another html pages. They are used to refactor common template presentation in a one place. Also great for iteration purposes <% render @collection %>.

9) When do we use partials vs helpers?
We use helpers for small, occasional formatting that can be reused. Once we find ourselfs to type a lot of HTML in helpers its a good sign to use partials.
Also another great use for partials are forms for new/create/edit/update actions.

10) When do we use non-model backed forms?
Everywhere where we do not need enter params data to our models. For instance, authentication sign in page is a great example.
